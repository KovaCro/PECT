from pathlib import Path
from tqdm import tqdm
import inspect
from collections.abc import Callable
import pect


def generate_and_evaluate_solutions(
    input_paths: list[Path],
    output_dir: Path,
    solver: Callable[[pect.Pectp], pect.Pects],
    solver_kwargs: dict = {},
) -> None:
    """
    Uses solver to generate solutions and writes solutions
    to a directory toggether with solution evaluations.

    Args:
        input_paths: list of paths to problems
        output_dir: path to output directory
        solver: function used to generate solution
        solver_kwargs: solver arguments
    """

    output_dir.mkdir(parents=True, exist_ok=True)

    solver_type = inspect.getmodule(solver).__name__

    for i, input_path in enumerate(
        tqdm(input_paths, desc=f"Generating {solver_type} solutions", position=0)
    ):
        problem = pect.parse_problem(input_path)
        solution = solver(problem, **solver_kwargs)
        is_valid = pect.is_valid(problem, solution)
        if not is_valid:
            print(f"Solution {i} generated by {solver_type} is invalid")
        evaluation = pect.evaluate(problem, solution)
        output_path = output_dir / input_path.stem
        pect.write_formatted_solution(
            output_path.with_suffix(".formatted.sln"), problem, solution
        )
        pect.write_solution(output_path.with_suffix(".sln"), solution)
        pect.write_evaluation(output_path.with_suffix(".eval"), evaluation)
    pect.generate_evaluation_csv(output_dir)